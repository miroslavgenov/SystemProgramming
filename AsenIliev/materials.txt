chapter 1
Many device drivers, indeed, are released together with user programs to help with
configuration and access to the target device. Those programs can range from simple
utilities to complete graphical applications.

You should understand, however, that
user programs are an integral part of a software package and that even policy-free
packages are distributed with configuration files that apply a default behavior to the
underlying mechanisms.

Device control
Almost every system operation eventually maps to a physical device. With the
exception of the processor, memory, and a very few other entities, any and all
device control operations are performed by code that is specific to the device
being addressed. That code is called a device driver. The kernel must have
embedded in it a device driver for every peripheral present on a system, from the
hard drive to the keyboard and the tape drive. This aspect of the kernel’s func-
tions is our primary interest in this book.



Loadable Modules
One of the good features of Linux is the ability to extend at runtime the set of fea-
tures offered by the kernel. This means that you can add functionality to the kernel
(and remove functionality as well) while the system is up and running.
Each piece of code that can be added to the kernel at runtime is called a module. The
Linux kernel offers support for quite a few different types (or classes) of modules,
including, but not limited to, device drivers. Each module is made up of object code
(not linked into a complete executable) that can be dynamically linked to the run-
ning kernel by the insmod program and can be unlinked by the rmmod program.
Figure 1-1 identifies different classes of modules in charge of specific tasks—a mod-
ule is said to belong to a specific class according to the functionality it offers. The
placement of modules in Figure 1-1 covers the most important classes, but is far from
complete because more and more functionality in Linux is being modularized.


Classes of Devices and Modules
The Linux way of looking at devices distinguishes between three fundamental device
types. Each module usually implements one of these types, and thus is classifiable as a
char module, a block module, or a network module. This division of modules into dif-
ferent types, or classes, is not a rigid one; the programmer can choose to build huge
modules implementing different drivers in a single chunk of code. Good program-
mers, nonetheless, usually create a different module for each new functionality they
implement, because decomposition is a key element of scalability and extendability.

Character devices
A character (char) device is one that can be accessed as a stream of bytes (like a
file); a char driver is in charge of implementing this behavior. Such a driver usu-
ally implements at least the open, close, read, and write system calls. The text
console (/dev/console) and the serial ports (/dev/ttyS0 and friends) are examples
of char devices, as they are well represented by the stream abstraction. Char
devices are accessed by means of filesystem nodes, such as /dev/tty1 and /dev/lp0.
The only relevant difference between a char device and a regular file is that you
can always move back and forth in the regular file, whereas most char devices
are just data channels, which you can only access sequentially. There exist,
nonetheless, char devices that look like data areas, and you can move back and
forth in them; for instance, this usually applies to frame grabbers, where the
applications can access the whole acquired image using mmap or lseek.

Block devices
Like char devices, block devices are accessed by filesystem nodes in the /dev
directory. A block device is a device (e.g., a disk) that can host a filesystem. In
most Unix systems, a block device can only handle I/O operations that transfer
one or more whole blocks, which are usually 512 bytes (or a larger power of
two) bytes in length. Linux, instead, allows the application to read and write a
block device like a char device—it permits the transfer of any number of bytes at
a time. As a result, block and char devices differ only in the way data is managed
internally by the kernel, and thus in the kernel/driver software interface. Like a
char device, each block device is accessed through a filesystem node, and the dif-
ference between them is transparent to the user. Block drivers have a completely
different interface to the kernel than char drivers.



Network interfaces
Any network transaction is made through an interface, that is, a device that is
able to exchange data with other hosts. Usually, an interface is a hardware
device, but it might also be a pure software device, like the loopback interface. A
network interface is in charge of sending and receiving data packets, driven by
the network subsystem of the kernel, without knowing how individual transac-
tions map to the actual packets being transmitted. Many network connections
(especially those using TCP) are stream-oriented, but network devices are, usu-
ally, designed around the transmission and receipt of packets. A network driver
knows nothing about individual connections; it only handles packets.
Not being a stream-oriented device, a network interface isn’t easily mapped to a
node in the filesystem, as /dev/tty1 is. The Unix way to provide access to inter-
faces is still by assigning a unique name to them (such as eth0), but that name
doesn’t have a corresponding entry in the filesystem. Communication between
the kernel and a network device driver is completely different from that used
with char and block drivers. Instead of read and write, the kernel calls functions
related to packet transmission.



In the official kernel distribution,
only an authorized user can load modules; the system call init_module checks if the
invoking process is authorized to load a module into the kernel. Thus, when run-
ning an official kernel, only the superuser,* or an intruder who has succeeded in
becoming privileged, can exploit the power of privileged code.

Driver writers must also be careful, of course, to avoid introducing security bugs.
The C programming language makes it easy to make several types of errors. Many
current security problems are created, for example, by buffer overrun errors, in which
the programmer forgets to check how much data is written to a buffer, and data ends
up written beyond the end of the buffer, thus overwriting unrelated data. Such errors
can compromise the entire system and must be avoided. Fortunately, avoiding these
errors is usually relatively easy in the device driver context, in which the interface to
the user is narrowly defined and highly controlled.

As far as the kernel is concerned, the even-numbered kernel versions (i.e., 2.6.x) are
the stable ones that are intended for general distribution. The odd versions (such as
2.7.x), on the contrary, are development snapshots and are quite ephemeral; the lat-
est of them represents the current status of development, but becomes obsolete in a
few days or so.

License Terms
Linux is licensed under Version 2 of the GNU General Public License (GPL), a docu-
ment devised for the GNU project by the Free Software Foundation. The GPL allows
anybody to redistribute, and even sell, a product covered by the GPL, as long as the
recipient has access to the source and is able to exercise the same rights. Addition-
ally, any software product derived from a product covered by the GPL must, if it is
redistributed at all, be released under the GPL.
The main goal of such a license is to allow the growth of knowledge by permitting
everybody to modify programs at will; at the same time, people selling software to
the public can still do their job. Despite this simple objective, there’s a never-ending
discussion about the GPL and its use. If you want to read the license, you can find it
in several places in your system, including the top directory of your kernel source
tree in the COPYING file.
Vendors often ask whether they can distribute kernel modules in binary form only.
The answer to that question has been deliberately left ambiguous. Distribution of
binary modules—as long as they adhere to the published kernel interface—has been
tolerated so far. But the copyrights on the kernel are held by many developers, and
not all of them agree that kernel modules are not derived products. If you or your
employer wish to distribute kernel modules under a nonfree license, you really need

to discuss the situation with your legal counsel. Please note also that the kernel
developers have no qualms against breaking binary modules between kernel releases,
even in the middle of a stable kernel series. If it is at all possible, both you and your
users are better off if you release your module as free software.
If you want your code to go into the mainline kernel, or if your code requires patches
to the kernel, you must use a GPL-compatible license as soon as you release the code.
Although personal use of your changes doesn’t force the GPL on you, if you distrib-
ute your code, you must include the source code in the distribution—people acquir-
ing your package must be allowed to rebuild the binary at will.
As far as this book is concerned, most of the code is freely redistributable, either in
source or binary form, and neither we nor O’Reilly retain any right on any derived
works. All the programs are available at ftp://ftp.ora.com/pub/examples/linux/drivers/,
and the exact license terms are stated in the LICENSE file in the same directory.


This module defines two functions, one to be invoked when the module is loaded
into the kernel (hello_init) and one for when the module is removed (hello_exit). The
module_init and module_exit lines use special kernel macros to indicate the role of
these two functions. Another special macro (MODULE_LICENSE) is used to tell the
kernel that this module bears a free license; without such a declaration, the kernel
complains when the module is loaded.

The printk function is defined in the Linux kernel and made available to modules; it
behaves similarly to the standard C library function printf. The kernel needs its own
printing function because it runs by itself, without the help of the C library. The
module can call printk because, after insmod has loaded it, the module is linked to
the kernel and can access the kernel’s public symbols (functions and variables, as
detailed in the next section). The string KERN_ALERT is the priority of the message.*
We’ve specified a high priority in this module, because a message with the default
priority might not show up anywhere useful, depending on the kernel version you
are running, the version of the klogd daemon, and your configuration. You can
ignore this issue for now; we explain it in Chapter 4.
You can test the module with the insmod and rmmod utilities, as shown below. Note
that only the superuser can load and unload a module.

the task of the
module’s initialization function is to prepare for later invocation of the module’s
functions;

The module’s exit function (hello_exit in the example) gets invoked just before
the module is unloaded. It should tell the kernel, “I’m not there anymore; don’t ask
me to do anything else.”

the exit function of a module
must carefully undo everything the init function built up

A module, on the
other hand, is linked only to the kernel, and the only functions it can call are the
ones exported by the kernel



User Space and Kernel Space
A module runs in kernel space, whereas applications run in user space. This concept
is at the base of operating systems theory.
The role of the operating system, in practice, is to provide programs with a consis-
tent view of the computer’s hardware. In addition, the operating system must
account for independent operation of programs and protection against unauthorized
access to resources. This nontrivial task is possible only if the CPU enforces protec-
tion of system software from the applications.
Every modern processor is able to enforce this behavior. The chosen approach is to
implement different operating modalities (or levels) in the CPU itself. The levels have
different roles, and some operations are disallowed at the lower levels; program code
can switch from one level to another only through a limited number of gates. Unix
systems are designed to take advantage of this hardware feature, using two such lev-
els. All current processors have at least two protection levels, and some, like the x86
family, have more levels; when several levels exist, the highest and lowest levels are
used. Under Unix, the kernel executes in the highest level (also called supervisor
mode), where everything is allowed, whereas applications execute in the lowest level
(the so-called user mode), where the processor regulates direct access to hardware
and unauthorized access to memory.
We usually refer to the execution modes as kernel space and user space. These terms
encompass not only the different privilege levels inherent in the two modes, but also
the fact that each mode can have its own memory mapping—its own address
space—as well.
Unix transfers execution from user space to kernel space whenever an application
issues a system call or is suspended by a hardware interrupt. Kernel code executing a
system call is working in the context of a process—it operates on behalf of the call-
ing process and is able to access data in the process’s address space. Code that han-
dles interrupts, on the other hand, is asynchronous with respect to processes and is
not related to any particular process.
The role of a module is to extend kernel functionality; modularized code runs in ker-
nel space. Usually a driver performs both the tasks outlined previously: some func-
tions in the module are executed as part of system calls, and some are in charge of
interrupt handling.


Often, as you look at the kernel API, you will encounter function names starting with
a double underscore (__). Functions so marked are generally a low-level component
of the interface and should be used with caution. Essentially, the double underscore
says to the programmer: “If you call this function, be sure you know what you are
doing.”


# obj-m : = char_driver_CT4872.o  states that there is one module to be built from the
# object file char_driver_CT4872.o. The resulting module is named char_driver_CT4872.ko
#  after being built from the object file.


Once you have everything set up, creating a makefile for your module is straightfor-
ward. In fact, for the “hello world” example shown earlier in this chapter, a single
line will suffice:
obj-m := hello.o
Readers who are familiar with make, but not with the 2.6 kernel build system, are
likely to be wondering how this makefile works. The above line is not how a tradi-
tional makefile looks, after all. The answer, of course, is that the kernel build system
handles the rest. The assignment above (which takes advantage of the extended syn-
tax provided by GNU make) states that there is one module to be built from the
object file hello.o. The resulting module is named hello.ko after being built from the
object file.
If, instead, you have a module called module.ko that is generated from two source
files (called, say, file1.c and file2.c), the correct incantation would be:
obj-m := module.o
module-objs := file1.o file2.o
For a makefile like those shown above to work, it must be invoked within the con-
text of the larger kernel build system. If your kernel source tree is located in, say,


your ~/kernel-2.6 directory, the make command required to build your module
(typed in the directory containing the module source and makefile) would be:
make -C ~/kernel-2.6 M=`pwd` modules
This command starts by changing its directory to the one provided with the -C
option (that is, your kernel source directory). There it finds the kernel’s top-level
makefile. The M= option causes that makefile to move back into your module source
directory before trying to build the modules target. This target, in turn, refers to the list
of modules found in the obj-m variable, which we’ve set to module.o in our examples.
Typing the previous make command can get tiresome after a while, so the kernel
developers have developed a sort of makefile idiom, which makes life easier for those
building modules outside of the kernel tree. The trick is to write your makefile as follows:
# If KERNELRELEASE is defined, we've been invoked from the
# kernel build system and can use its language.
ifneq ($(KERNELRELEASE),)
obj-m := hello.o
# Otherwise we were called directly from the command
# line; invoke the kernel build system.
else
KERNELDIR ?= /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)
default:
$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
endif
Once again, we are seeing the extended GNU make syntax in action. This makefile is
read twice on a typical build. When the makefile is invoked from the command line,
it notices that the KERNELRELEASE variable has not been set. It locates the kernel source
directory by taking advantage of the fact that the symbolic link build in the installed
modules directory points back at the kernel build tree. If you are not actually run-
ning the kernel that you are building for, you can supply a KERNELDIR= option on the
command line, set the KERNELDIR environment variable, or rewrite the line that sets
KERNELDIR in the makefile. Once the kernel source tree has been found, the makefile
invokes the default: target, which runs a second make command (parameterized in
the makefile as $(MAKE)) to invoke the kernel build system as described previously.
On the second reading, the makefile sets obj-m, and the kernel makefiles take care of
actually building the module.
This mechanism for building modules may strike you as a bit unwieldy and obscure.
Once you get used to it, however, you will likely appreciate the capabilities that have
been programmed into the kernel build system. Do note that the above is not a com-
plete makefile; a real makefile includes the usual sort of targets for cleaning up
unneeded files, installing modules, etc. See the makefiles in the example source
directory for a complete example.


//insmod
Interested readers may want to look at how the kernel supports insmod: it relies on a
system call defined in kernel/module.c. The function sys_init_module allocates kernel
memory to hold a module (this memory is allocated with vmalloc; see the section
“vmalloc and Friends” in Chapter 8); it then copies the module text into that mem-
ory region, resolves kernel references in the module via the kernel symbol table, and
calls the module’s initialization function to get everything going.


LINUX_VERSION_CODE
This macro expands to the binary representation of the kernel version, one byte
for each part of the version release number. For example, the code for 2.6.10 is
132618 (i.e., 0x02060a).* With this information, you can (almost) easily deter-
mine what version of the kernel you are dealing with.
KERNEL_VERSION(major,minor,release)
This is the macro used to build an integer version code from the individual num-
bers that build up a version number. For example, KERNEL_VERSION(2,6,10)
expands to 132618. This macro is very useful when you need to compare the
current version and a known checkpoint.


module.h contains a great many definitions of symbols and functions needed by load-
able modules. You need init.h to specify your initialization and cleanup functions, as
we saw in the “hello world” example above, and which we revisit in the next sec-
tion. Most modules also include moduleparam.h to enable the passing of parameters
to the module at load time; we will get to that shortly.

It is not strictly necessary, but your module really should specify which license
applies to its code. Doing so is just a matter of including a MODULE_LICENSE line:
MODULE_LICENSE("GPL");
The specific licenses recognized by the kernel are “GPL” (for any version of the GNU
General Public License), “GPL v2” (for GPL version two only), “GPL and additional
rights,” “Dual BSD/GPL,” “Dual MPL/GPL,” and “Proprietary.” Unless your mod-
ule is explicitly marked as being under a free license recognized by the kernel, it is
assumed to be proprietary, and the kernel is “tainted” when the module is loaded. As
we mentioned in the section “License Terms” in Chapter 1, kernel developers tend to
be unenthusiastic about helping users who experience problems after loading propri-
etary modules.
Other descriptive definitions that can be contained within a module include
MODULE_AUTHOR (stating who wrote the module), MODULE_DESCRIPTION (a human-read-
able statement of what the module does), MODULE_VERSION (for a code revision num-
ber; see the comments in <linux/module.h> for the conventions to use in creating
version strings), MODULE_ALIAS (another name by which this module can be known),
and MODULE_DEVICE_TABLE (to tell user space about which devices the module sup-
ports). We’ll discuss MODULE_ALIAS in Chapter 11 and MODULE_DEVICE_TABLE in
Chapter 12.


Initialization functions should be declared static, since they are not meant to be visi-
ble outside the specific file; there is no hard rule about this, though, as no function is
exported to the rest of the kernel unless explicitly requested. The __init token in the
definition may look a little strange; it is a hint to the kernel that the given function is
used only at initialization time. The module loader drops the initialization function
after the module is loaded, making its memory available for other uses. There is
a similar tag (__initdata) for data used only during initialization. Use of __init and
__initdata is optional, but it is worth the trouble. Just be sure not to use them for
any function (or data structure) you will be using after initialization completes. You
may also encounter __devinit and __devinitdata in the kernel source; these trans-
late to __init and __initdata only if the kernel has not been configured for hotplug-
gable devices. We will look at hotplug support in Chapter 14.

If your module does not define a cleanup function, the kernel does not allow it to be
unloaded.

Error Handling During Initialization
One thing you must always bear in mind when registering facilities with the kernel
is that the registration could fail. Even the simplest action often requires memory
allocation, and the required memory may not be available. So module code must
always check return values, and be sure that the requested operations have actually
succeeded.
If any errors occur when you register utilities, the first order of business is to decide
whether the module can continue initializing itself anyway. Often, the module can
continue to operate after a registration failure, with degraded functionality if neces-
sary. Whenever possible, your module should press forward and provide what capa-
bilities it can after things fail.
If it turns out that your module simply cannot load after a particular type of failure,
you must undo any registration activities performed before the failure. Linux doesn’t
keep a per-module registry of facilities that have been registered, so the module must
back out of everything itself if initialization fails at some point. If you ever fail to
unregister what you obtained, the kernel is left in an unstable state; it contains inter-
nal pointers to code that no longer exists. In such situations, the only recourse, usu-
ally, is to reboot the system. You really do want to take care to do the right thing
when an initialization error occurs.

Traditionally, the major number identifies the driver associated with the device.


The minor number is used by the kernel to determine exactly which device is being
referred to. 
Depending on how your driver is written (as we will see below), you can
either get a direct pointer to your device from the kernel, or you can use the minor
number yourself as an index into a local array of devices. Either way, the kernel itself
knows almost nothing about minor numbers beyond the fact that they refer to
devices implemented by your driver.

Allocating device number
major number  -  if 0 then major number will be choosen randomly from the ones
that are currently free
name - the device which will be asociated with the major number 		
As with most kernel functions, the return value will be 0
if the allocation was successfully performed. In case of error, a negative error code


Used to retrieve data from the device. A null pointer in this position causes the
read system call to fail with -EINVAL (“Invalid argument”). A nonnegative return
value represents the number of bytes successfully read (the return value is a
“signed size” type, usually the native integer type for the target platform).

Using the /proc Filesystem

The /proc filesystem is a special, software-created filesystem that is used by the ker-
nel to export information to the world.

Each file under /proc is tied to a kernel func-tion
that generates the file’s “contents” on the fly when the file is read. We have
already seen some of these files in action; /proc/modules, for example, always returns
a list of the currently loaded modules.
/proc is heavily used in the Linux system. Many utilities on a modern Linux distribu-
tion, such as ps, top, and uptime, get their information from /proc. 

Some device driv-
ers also export information via /proc, and yours can do so as well. The /proc
filesystem is dynamic, so your module can add or remove entries at any time.

Fully featured /proc entries can be complicated beasts; among other things, 

they can
be written to as well as read from. 

Most of the time, however, /proc entries are read-
only files. 

This section concerns itself with the simple read-only case. Those who are
interested in implementing something more complicated can look here for the basics;
the kernel source may then be consulted for the full picture.
Before we continue, however, we should mention that adding files under /proc is dis-
couraged. The /proc filesystem is seen by the kernel developers as a bit of an uncon-
trolled mess that has gone far beyond its original purpose (which was to provide
information about the processes running in the system). The recommended way of
making information available in new code is via sysfs. As suggested, working with
sysfs requires an understanding of the Linux device model, however, and we do not










































